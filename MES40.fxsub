////////////////////////////////////////////////////////////////////////////////////////////////
//
//  MMD Extended Shader (MES40) ver 2.4 by KH40 (https://www.deviantart.com/khoast40)
//
//  For full credits, go to https://github.com/KH40-khoast40/MES40 or read MES40_Credits.txt
//
////////////////////////////////////////////////////////////////////////////////////////////////
// パラメータ宣言

// 座法変換行列
float4x4 WorldViewProjMatrix      : WORLDVIEWPROJECTION;
float4x4 WorldMatrix              : WORLD;
float4x4 ViewMatrix               : VIEW;
float4x4 ProjMatrix               : PROJECTION;
float4x4 WorldViewMatrix          : WORLDVIEW;
float4x4 LightWorldViewProjMatrix : WORLDVIEWPROJECTION < string Object = "Light"; >;

float3   LightDirection    : DIRECTION < string Object = "Light"; >;
float3   CameraPosition    : POSITION  < string Object = "Camera"; >;

// マテリアル色
float4   MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;
float3   MaterialAmbient   : AMBIENT  < string Object = "Geometry"; >;
float3   MaterialEmmisive  : EMISSIVE < string Object = "Geometry"; >;
float3   MaterialSpecular  : SPECULAR < string Object = "Geometry"; >;
float    SpecularPower     : SPECULARPOWER < string Object = "Geometry"; >;
float3   MaterialToon      : TOONCOLOR;
float4   EdgeColor         : EDGECOLOR;
float4   GroundShadowColor : GROUNDSHADOWCOLOR;
// ライト色
float3   LightDiffuse      : DIFFUSE   < string Object = "Light"; >;
float3   LightAmbient      : AMBIENT   < string Object = "Light"; >;
float3   LightSpecular     : SPECULAR  < string Object = "Light"; >;
static float4 DiffuseColor  = MaterialDiffuse  * float4(LightDiffuse, 1.0f);
static float3 AmbientColor  = MaterialAmbient  * LightAmbient + MaterialEmmisive;
static float3 SpecularColor = MaterialSpecular * LightSpecular;

// テクスチャ材質モーフ値
float4   TextureAddValue   : ADDINGTEXTURE;
float4   TextureMulValue   : MULTIPLYINGTEXTURE;
float4   SphereAddValue    : ADDINGSPHERETEXTURE;
float4   SphereMulValue    : MULTIPLYINGSPHERETEXTURE;

bool	 use_subtexture;    // サブテクスチャフラグ

bool     parthf;   // パースペクティブフラグ
bool     transp;   // 半透明フラグ
bool	 spadd;    // スフィアマップ加算合成フラグ
#define SKII1    1500
#define SKII2    8000

float2 ViewportSize : VIEWPORTPIXELSIZE;
static float ViewportAspect = ViewportSize.x / ViewportSize.y;

////////////////////////////////////////////////////////////////////////////////////////////////
// FOV Injection Method

float4x4 WorldViewProjMatrix_Final()
{
	#if CUSTOM_FOV == 0
		return WorldViewProjMatrix;
	#else
		float4x4 projMatrixFovInjected = ProjMatrix;
		
		float valueFov;
		
		#if Custom_Fov_Axis == 1
			valueFov = Custom_Fov.x;
		#elif Custom_Fov_Axis == 2
			valueFov = Custom_Fov.y;
		#else
			valueFov = Custom_Fov.z;
		#endif
		
		float tanFov = tan(valueFov * (3.14159265359 / 180) * 0.5);

		projMatrixFovInjected[0][0] = 1.0 / (tanFov * ViewportAspect);
		projMatrixFovInjected[1][1] = 1.0 / tanFov;

		return mul( mul( WorldMatrix,ViewMatrix ) , projMatrixFovInjected );
	#endif
}
////////////////////////////////////////////////////////////////////////////////////////////////

// オブジェクトのテクスチャ

#ifndef AnimatedTexture

	texture ObjectTexture: MATERIALTEXTURE;
	
#else

	texture ObjectTexture: ANIMATEDTEXTURE 
	<
		string ResourceName = AnimatedTexture;
	>;
	
#endif

sampler ObjTexSampler = sampler_state {
    texture = <ObjectTexture>;
    MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	MAXANISOTROPY = 16;
};

// スフィアマップのテクスチャ
texture ObjectSphereMap: MATERIALSPHEREMAP;
sampler ObjSphareSampler = sampler_state {
    texture = <ObjectSphereMap>;
    MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	MAXANISOTROPY = 16;
};

// トゥーンマップのテクスチャ
texture ObjectToonTexture: MATERIALTOONTEXTURE;
sampler ObjToonSampler = sampler_state {
    texture = <ObjectToonTexture>;
    MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = CLAMP;
	ADDRESSV  = CLAMP;
	MAXANISOTROPY = 16;
};

#ifdef NormalMapTexture

#if NormalMap_Animated == 0

	texture2D NormalMap <
		string ResourceName = NormalMapTexture;
		int MipLevels = 0;
	>;
	
#else

	texture2D NormalMap: ANIMATEDTEXTURE <
		string ResourceName = NormalMapTexture;
		int MipLevels = 0;
	>;
	
#endif

sampler2D NormalMapSamp = sampler_state {
	texture = <NormalMap>;
	MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	MAXANISOTROPY = 16;
};

float3x3 compute_tangent_frame(float3 Normal, float3 View, float2 UV)
{
  float3 dp1 = ddx(View);
  float3 dp2 = ddy(View);
  float2 duv1 = ddx(UV);
  float2 duv2 = ddy(UV);

  float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
  float2x3 inverseM = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
  float3 Tangent = mul(float2(duv1.x, duv2.x), inverseM);
  float3 Binormal = mul(float2(duv1.y, duv2.y), inverseM);

  return float3x3(normalize(Tangent), normalize(Binormal), Normal);
}
#endif

#ifdef SpecularMapTexture

#if SpecularMap_Animated == 0

	texture2D SpecularMap <
		string ResourceName = SpecularMapTexture;
		int MipLevels = 0;
	>;

#else

	texture2D SpecularMap : ANIMATEDTEXTURE <
		string ResourceName = SpecularMapTexture;
		int MipLevels = 0;
	>;
	
#endif

sampler2D SpecularMapSamp = sampler_state {
	texture = <SpecularMap>;
	MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	MAXANISOTROPY = 16;
};
#endif

#ifdef CubeMapTexture
//Cube Map
textureCUBE CubeMap
<
	string ResourceName = CubeMapTexture;
>;
sampler CubeMapSamp = sampler_state
{
    Texture = <CubeMap>;
    MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = CLAMP;
	ADDRESSV  = CLAMP;
	MAXANISOTROPY = 16;
};

textureCUBE CubeMapLow
<
	string ResourceName = CubeMapTexture;
	int Width = IBL_Resolution;
    int Height = IBL_Resolution;
>;
sampler CubeMapLowSamp = sampler_state
{
    Texture = <CubeMapLow>;
    MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	//MIPFILTER = ANISOTROPIC;
	ADDRESSU  = CLAMP;
	ADDRESSV  = CLAMP;
	MAXANISOTROPY = 16;
};
#endif

#ifdef IBLTexture
textureCUBE IBLtex
<
	string ResourceName = IBLTexture;
	int Width = IBL_Resolution;
    int Height = IBL_Resolution;
>;
sampler IBLSamp = sampler_state
{
    Texture = <IBLtex>;
    MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = CLAMP;
	ADDRESSV  = CLAMP;
	MAXANISOTROPY = 16;
};
#endif

#ifdef SubMapTexture
//Sub Map
texture2D SubMap <
	string ResourceName = SubMapTexture;
	int MipLevels = 0;
>;
sampler2D SubMapSamp = sampler_state {
	texture = <SubMap>;
	MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	MAXANISOTROPY = 16;
};
#endif

#ifdef ThicknessMapTexture
//Thickness Map
texture2D ThicknessMap <
	string ResourceName = ThicknessMapTexture;
	int MipLevels = 0;
>;
sampler2D ThicknessMapSamp = sampler_state {
	texture = <ThicknessMap>;
	MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	MAXANISOTROPY = 16;
};
#endif

#ifdef HeightMapTexture
//Height Map
texture2D HeightMap <
	string ResourceName = HeightMapTexture;
	int MipLevels = 0;
>;
sampler2D HeightMapSamp = sampler_state {
	texture = <HeightMap>;
	MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
	MAXANISOTROPY = 16;
};

float3 ParallaxOcclusionDirection(float3 normal, float3 worldPos, float2 coord)
{
	float3 viewNormal = mul(normal, (float3x3)WorldViewMatrix);
	float3 viewPosition = mul(float4(worldPos, 1), WorldViewMatrix).xyz;
	float3 viewdir = normalize(-viewPosition);

	float3 dp1 = ddx(viewPosition);
	float3 dp2 = ddy(viewPosition);

	float2 duv1 = ddx(coord);
	float2 duv2 = ddy(coord);

	float3x3 M = float3x3(dp1, dp2, viewNormal);
	float2x3 I = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
	   
	float2 proj = mul(I, viewdir) / dot(dp1, I[0]);

	float3 direction;
	direction.xy = duv1 * proj.x + duv2 * proj.y;
	direction.z = dot(viewNormal, viewdir);

	return direction;
}

float2 ParallaxOcclusionMap(sampler2D heightMap, float2 coord, float3 V, int numSteps, float parallaxScale)
{
	float step = 1.0 / numSteps;
	float2 delta = parallaxScale * V.xy / (-V.z * numSteps);

	float curLayerHeight = 0;
	float curHeight = tex2D(heightMap, coord).r;
	float2 curTexcoord = coord;

	[unroll]
	for (int i = 0; i < numSteps; i++)
	{
		if (curHeight <= curLayerHeight)
			break;

		curLayerHeight += step; 
		curTexcoord -= delta;
		curHeight = tex2D(heightMap, curTexcoord).r;
	}

	float2 deltaTexcoord = delta * 0.5;
	float deltaHeight = step * 0.5;

	curTexcoord += deltaTexcoord;
	curLayerHeight -= deltaHeight;

	[unroll]
	for (int j = 0; j < 5; j++)
	{
		deltaTexcoord *= 0.5;
		deltaHeight *= 0.5;

		curHeight = tex2D(heightMap, curTexcoord).r;

		if (curHeight > curLayerHeight)
		{
			curTexcoord -= deltaTexcoord;
			curLayerHeight += deltaHeight;
		}
		else
		{
			curTexcoord += deltaTexcoord;
			curLayerHeight -= deltaHeight;
		}
	}

	return curTexcoord;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////
// 輪郭描画

// 頂点シェーダ
float4 ColorRender_VS(float4 Pos : POSITION) : POSITION 
{
    // カメラ視点のワールドビュー射影変換
    return mul( Pos, WorldViewProjMatrix_Final() );
}

// ピクセルシェーダ
float4 ColorRender_PS() : COLOR
{
    // 輪郭色で塗りつぶし
    return EdgeColor;
}

// 輪郭描画用テクニック
technique EdgeTec < string MMDPass = "edge"; > {
    pass DrawEdge {
        VertexShader = compile vs_2_0 ColorRender_VS();
        PixelShader  = compile ps_2_0 ColorRender_PS();
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// 影（非セルフシャドウ）描画

// 頂点シェーダ
float4 Shadow_VS(float4 Pos : POSITION) : POSITION
{
    // カメラ視点のワールドビュー射影変換
    return mul( Pos, WorldViewProjMatrix_Final() );
}

// ピクセルシェーダ
float4 Shadow_PS() : COLOR
{
    // 地面影色で塗りつぶし
    return GroundShadowColor;
}

// 影描画用テクニック
technique ShadowTec < string MMDPass = "shadow"; > {
    pass DrawShadow {
        VertexShader = compile vs_2_0 Shadow_VS();
        PixelShader  = compile ps_2_0 Shadow_PS();
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウOFF）

struct VS_OUTPUT {
    float4 Pos        : POSITION;    // 射影変換座標
    float2 Tex        : TEXCOORD1;   // テクスチャ
    float3 Normal     : TEXCOORD2;   // 法線
    float3 Eye        : TEXCOORD3;   // カメラとの相対位置
    float2 SpTex      : TEXCOORD4;	 // スフィアマップテクスチャ座標
    float4 Color      : COLOR0;      // ディフューズ色
    float3 Specular   : COLOR1;      // スペキュラ色
};

// 頂点シェーダ
VS_OUTPUT Basic_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0, float2 Tex2 : TEXCOORD1, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;
    
    // カメラ視点のワールドビュー射影変換
    Out.Pos = mul( Pos, WorldViewProjMatrix_Final() );
    
    // カメラとの相対位置
    Out.Eye = CameraPosition - mul( Pos, WorldMatrix );
    // 頂点法線
    Out.Normal = normalize( mul( Normal, (float3x3)WorldMatrix ) );
    
    // ディフューズ色＋アンビエント色 計算
    Out.Color.rgb = AmbientColor;
    if ( !useToon ) {
        Out.Color.rgb += max(0,dot( Out.Normal, -LightDirection )) * DiffuseColor.rgb;
    }
    Out.Color.a = DiffuseColor.a;
    Out.Color = saturate( Out.Color );
    
    // テクスチャ座標
    Out.Tex = Tex;
    
    if ( useSphereMap ) {
		if ( use_subtexture ) {
			// PMXサブテクスチャ座標
			Out.SpTex = Tex2;
	    } else {
	        // スフィアマップテクスチャ座標
	        float2 NormalWV = mul( Out.Normal, (float3x3)ViewMatrix );
	        Out.SpTex.x = NormalWV.x * 0.5f + 0.5f;
	        Out.SpTex.y = NormalWV.y * -0.5f + 0.5f;
	    }
    }
    
    // スペキュラ色計算
    float3 HalfVector = normalize( normalize(Out.Eye) + -LightDirection );
    Out.Specular = pow( max(0,dot( HalfVector, Out.Normal )), SpecularPower ) * SpecularColor;
    
    return Out;
}

// ピクセルシェーダ
float4 Basic_PS(VS_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon) : COLOR0
{
	//////////////////////Specular Map related values//////////////////////////////////////
	#ifdef SpecularMapTexture
	float4 SpecularLevel = tex2D(SpecularMapSamp, IN.Tex);
	
	#else
	float4 SpecularLevel = float4(1,1,1,1);
	#endif
	/////////////////////////////////////////////////////////////////////////////////////


    float4 Color = IN.Color;
    if ( useTexture ) {
        // テクスチャ適用
        Color *= tex2D( ObjTexSampler, IN.Tex );
    }
    if ( useSphereMap ) {
        // スフィアマップ適用
        float4 TexColor = tex2D(ObjSphareSampler,IN.SpTex);
		
		float TexColorMonoCaculate = (TexColor.r+TexColor.g+TexColor.b)/3;
		float4 TexColorMono = float4(TexColorMonoCaculate,TexColorMonoCaculate,TexColorMonoCaculate,TexColor.a);
		
		TexColor = lerp(TexColorMono, TexColor, TexColor.a * Spa_CubeMap_Saturation);
		
		#if Spa_CubeMap_Use_SpecularMap == 1
        if(spadd) Color.rgb += TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity;
        else      Color.rgb *= TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity;
		
		#else
        if(spadd) Color.rgb += TexColor.rgb * Spa_CubeMap_Intensity;
        else      Color.rgb *= TexColor.rgb * Spa_CubeMap_Intensity;
		#endif
		
        Color.a *= TexColor.a;
    }
    
    if ( useToon ) {
        // トゥーン適用
        float LightNormal = dot( IN.Normal, -LightDirection );
        Color *= tex2D(ObjToonSampler, float2(0, 0.5 - LightNormal * Toon_Gradient) );
    }
    
    // スペキュラ適用
	
    #if SpecularLight_Use_SpecularMap == 1
    Color.rgb += IN.Specular * SpecularLevel * SpecularLight_Intensity;
	
	#else
    Color.rgb += IN.Specular * SpecularLight_Intensity;
	#endif
	
	#if ALPHATEST == 1
		
			Color.a = ( Color.a >= Alpha_Threshold ) ? 1 : 0;
				
	#endif
    
    return Color;
}

// オブジェクト描画用テクニック（アクセサリ用）
// 不要なものは削除可
technique MainTec0 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(false, false, false);
        PixelShader  = compile ps_3_0 Basic_PS(false, false, false);
    }
}

technique MainTec1 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(true, false, false);
        PixelShader  = compile ps_3_0 Basic_PS(true, false, false);
    }
}

technique MainTec2 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(false, true, false);
        PixelShader  = compile ps_3_0 Basic_PS(false, true, false);
    }
}

technique MainTec3 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(true, true, false);
        PixelShader  = compile ps_3_0 Basic_PS(true, true, false);
    }
}

// オブジェクト描画用テクニック（PMDモデル用）
technique MainTec4 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(false, false, true);
        PixelShader  = compile ps_3_0 Basic_PS(false, false, true);
    }
}

technique MainTec5 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(true, false, true);
        PixelShader  = compile ps_3_0 Basic_PS(true, false, true);
    }
}

technique MainTec6 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(false, true, true);
        PixelShader  = compile ps_3_0 Basic_PS(false, true, true);
    }
}

technique MainTec7 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS(true, true, true);
        PixelShader  = compile ps_3_0 Basic_PS(true, true, true);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// セルフシャドウ用Z値プロット

struct VS_ZValuePlot_OUTPUT {
    float4 Pos : POSITION;              // 射影変換座標
    float4 ShadowMapTex : TEXCOORD0;    // Zバッファテクスチャ
};

// 頂点シェーダ
VS_ZValuePlot_OUTPUT ZValuePlot_VS( float4 Pos : POSITION )
{
    VS_ZValuePlot_OUTPUT Out = (VS_ZValuePlot_OUTPUT)0;

    // ライトの目線によるワールドビュー射影変換をする
    Out.Pos = mul( Pos, LightWorldViewProjMatrix );

    // テクスチャ座標を頂点に合わせる
    Out.ShadowMapTex = Out.Pos;

    return Out;
}

// ピクセルシェーダ
float4 ZValuePlot_PS( float4 ShadowMapTex : TEXCOORD0 ) : COLOR
{
    // R色成分にZ値を記録する
    return float4(ShadowMapTex.z/ShadowMapTex.w,0,0,1);
}

// Z値プロット用テクニック
technique ZplotTec < string MMDPass = "zplot"; > {
    pass ZValuePlot {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_2_0 ZValuePlot_VS();
        PixelShader  = compile ps_2_0 ZValuePlot_PS();
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウON）

// シャドウバッファのサンプラ。"register(s0)"なのはMMDがs0を使っているから
sampler DefSampler : register(s0);

struct BufferShadow_OUTPUT {
    float4 Pos      : POSITION;     // 射影変換座標
    float4 ZCalcTex : TEXCOORD0;    // Z値
    float4 TexUVs   : TEXCOORD1;    // テクスチャ
    float3 Normal   : TEXCOORD2;    // 法線
    float3 Eye      : TEXCOORD3;    // カメラとの相対位置
    float2 SpTex    : TEXCOORD4;	 // スフィアマップテクスチャ座標
	float4 VColor	: TEXCOORD5;
	float4 PosWorld : TEXCOORD6;
    float4 Color    : COLOR0;       // ディフューズ色
};

// 頂点シェーダ
BufferShadow_OUTPUT BufferShadow_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0, float2 Tex2 : TEXCOORD1, float4 VColor : Vertex_Color_Stored_At, float2 SubMapUV : Sub_Map_Stored_At , uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon)
{
    BufferShadow_OUTPUT Out = (BufferShadow_OUTPUT)0;

    // カメラ視点のワールドビュー射影変換
    Out.Pos = mul( Pos, WorldViewProjMatrix_Final() );
	
	Out.PosWorld = mul( Pos, WorldMatrix );
    
    // カメラとの相対位置
    Out.Eye = CameraPosition - mul( Pos, WorldMatrix );
    // 頂点法線
    Out.Normal = normalize( mul( Normal, (float3x3)WorldMatrix ) );
	// ライト視点によるワールドビュー射影変換
    Out.ZCalcTex = mul( Pos, LightWorldViewProjMatrix );
	
	Out.VColor = VColor;
	
	Out.TexUVs = float4(Tex,SubMapUV);
    
    // ディフューズ色＋アンビエント色 計算
    Out.Color.rgb = AmbientColor;
    if ( !useToon ) {
        Out.Color.rgb += max(0,dot( Out.Normal, -LightDirection )) * DiffuseColor.rgb;
    }
    Out.Color.a = DiffuseColor.a;
    Out.Color = saturate( Out.Color );
    
    if ( useSphereMap ) {
		if ( use_subtexture ) {
			// PMXサブテクスチャ座標
			Out.SpTex = Tex2;
	    } else {
		}
    }
    
    return Out;
}

// ピクセルシェーダ
float4 BufferShadow_PS(BufferShadow_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon) : COLOR
{
	/////////////////////////////////////////////////////////////////////////////////////////////////
		if (Controller)
		{
			Toon_Intensity = Toon_Intensity_F;
			Toon_Brightness = Toon_Brightness_F;
			Toon_Gradient = Toon_Gradient_F;
			
			Spa_CubeMap_Intensity = Spa_CubeMap_Intensity_F;
			Spa_CubeMap_Saturation = Spa_CubeMap_Saturation_F;
			
			SpecularLight_Intensity = SpecularLight_Intensity_F;
			SpecularLight_Focus = SpecularLight_Focus_F;
			
			Spa_CubeMap_SpecularLight_Tint = Spa_CubeMap_SpecularLight_Tint_F;
			
			////////////////////////////////////////////////////////////////////
			
			NormalMap_Intensity = NormalMap_Intensity_F;
			
			SpecularMap_Saturation = SpecularMap_Saturation_F;
			
			////////////////////////////////////////////////////////////////////
			
			Rim_Intensity = Rim_Intensity_F;
			Rim_Gradient = Rim_Gradient_F;
			Rim_Color = float3(Rim_Color_R_F,Rim_Color_G_F,Rim_Color_B_F);
			
			Vertex_Color_Intensity = Vertex_Color_Intensity_F;
			
			Parallax_Scale = Parallax_Scale_F;
			
			Subsurface_Toon_Intensity = Subsurface_Toon_Intensity_F;
			Subsurface_Toon_Gradient = Subsurface_Toon_Gradient_F;
			Subsurface_Rim_Intensity = Subsurface_Rim_Intensity_F;
			Subsurface_Rim_Gradient = Subsurface_Rim_Gradient_F;
			Subsurface_Color = float3(Subsurface_Color_R_F,Subsurface_Color_G_F,Subsurface_Color_B_F);
			
			IBL_Intensity = IBL_Intensity_F;
			IBL_Brightness = IBL_Brightness_F;
			IBL_Saturation = IBL_Saturation_F;
			IBL_Blur = IBL_Blur_F;
		}
	/////////////////////////////////////////////////////////////////////////////////////////////////
	
	float2 Tex = IN.TexUVs.xy;
	float2 SubMapUV = IN.TexUVs.zw;
	
	#if PARALLAX == 1
	float3 ParallaxViewDirection = ParallaxOcclusionDirection(IN.Normal, IN.PosWorld.xyz, Tex);
	Tex = ParallaxOcclusionMap(HeightMapSamp, Tex, ParallaxViewDirection, 15, Parallax_Scale);
	#endif
	
	float4 VertexColor = float4(lerp(float3(1,1,1),float3(IN.VColor.r,IN.VColor.g,IN.VColor.b),Vertex_Color_Intensity),IN.VColor.a);
	
	#ifdef SubMapTexture
	float3 SubMap = tex2D(SubMapSamp,SubMapUV);
	#endif
	
	//////////////////////Normal Map related values//////////////////////////////////////
	#ifdef NormalMapTexture
		
		float4 NormalColor;
		NormalColor.xyz = tex2D(NormalMapSamp,Tex).rgb*2;
		NormalColor.a = 1;
		
		NormalColor.xyz = lerp(float3(0.5,0.5,1)*2,NormalColor.xyz,NormalMap_Intensity);
		
		//NormalColor.xy *= NormalMap_Intensity;
		
		float3 NormalDirection = normalize(IN.Normal);
		float3 v = normalize(IN.Eye);
		
		float3x3 tangentFrame = compute_tangent_frame(NormalDirection, v, Tex);
		NormalDirection = normalize(mul(NormalColor - 1.0f, tangentFrame));
	
	#else
		
		float3 NormalDirection = normalize(IN.Normal);
		
	#endif
	/////////////////////////////////////////////////////////////////////////////////////
	
	//////////////////////Specular Map related values//////////////////////////////////////
	#ifdef SpecularMapTexture
	float4 SpecularLevel = tex2D(SpecularMapSamp, Tex);
	float SpecularLevelMonoCalculate = (SpecularLevel.r+SpecularLevel.g+SpecularLevel.b)/3;
	float3 SpecularLevelMono = float3(SpecularLevelMonoCalculate,SpecularLevelMonoCalculate,SpecularLevelMonoCalculate);
	SpecularLevel.rgb = lerp(SpecularLevelMono,SpecularLevel.rgb,SpecularMap_Saturation);
	
	#else
	float4 SpecularLevel = float4(1,1,1,1);
	#endif
	/////////////////////////////////////////////////////////////////////////////////////

    // スペキュラ色計算
	#if SpecularLight_Affected_By_LightDirection == 1
    float3 HalfVector = normalize( normalize(IN.Eye) + -LightDirection );
	
	#else
	float3 HalfVector = normalize( normalize(IN.Eye));
	#endif
	
	#if SpecularLight_Use_NormalMap == 1
    float3 Specular = pow( max(0,dot( HalfVector, NormalDirection )), SpecularLight_Focus ) * SpecularColor;
	
	#else
    float3 Specular = pow( max(0,dot( HalfVector, IN.Normal )), SpecularLight_Focus ) * SpecularColor;
	#endif
    
    float4 Color = IN.Color;
    float4 ShadowColor = float4(saturate(AmbientColor), Color.a);  // 影の色
    if ( useTexture ) {
        // テクスチャ適用
        float4 TexColor = tex2D( ObjTexSampler, Tex );
        // テクスチャ材質モーフ数
	    TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a);
        Color *= TexColor;
        ShadowColor *= TexColor;
    }
    if ( useSphereMap ) {
	
		// スフィアマップテクスチャ座標
		
		#if Spa_CubeMap_Use_NormalMap == 1
	    float2 NormalWV = mul( NormalDirection , (float3x3)ViewMatrix );
		
		#else
	    float2 NormalWV = mul( IN.Normal , (float3x3)ViewMatrix );
		#endif
		
	    IN.SpTex.x = NormalWV.x * 0.5f + 0.5f;
	    IN.SpTex.y = NormalWV.y * -0.5f + 0.5f;
		
        // スフィアマップ適用
        float4 TexColor = tex2D(ObjSphareSampler,IN.SpTex);
		
		float TexColorMonoCalculate = (TexColor.r+TexColor.g+TexColor.b)/3;
		float4 TexColorMono = float4(TexColorMonoCalculate,TexColorMonoCalculate,TexColorMonoCalculate,TexColor.a);
		
		TexColor = lerp(TexColorMono, TexColor, TexColor.a * Spa_CubeMap_Saturation);
		
        // スフィアテクスチャ材質モーフ数
        TexColor.rgb = lerp(spadd?0:1, TexColor * SphereMulValue + SphereAddValue, SphereMulValue.a + SphereAddValue.a);
		
		float3 ColorTemp = Color.rgb;
		float3 ShadowColorTemp = ShadowColor.rgb;
        
		#if Spa_CubeMap_Use_SpecularMap == 1
		if(spadd) {
            Color.rgb += TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity;
            ShadowColor.rgb += TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity;
			
			ColorTemp = 1 - ( (1-(TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ColorTemp) );
			ShadowColorTemp = 1 - ( (1-(TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp) );
			
			Color.rgb = lerp( Color.rgb , ColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
			ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
			
        } else {
            Color.rgb *= TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity;
            ShadowColor.rgb *= TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity;
			
			ColorTemp = 1 - ( (1-(TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ColorTemp) );
			ShadowColorTemp = 1 - ( (1-(TexColor.rgb * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp) );
			
			Color.rgb = lerp( Color.rgb , ColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
			ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
        }
		
		#else
		if(spadd) {
            Color.rgb += TexColor.rgb * Spa_CubeMap_Intensity;
            ShadowColor.rgb += TexColor.rgb * Spa_CubeMap_Intensity;
			
			ColorTemp = 1 - ( (1-(TexColor.rgb * Spa_CubeMap_Intensity)) * (1-ColorTemp) );
			ShadowColorTemp = 1 - ( (1-(TexColor.rgb * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp) );
			
			Color.rgb = lerp( Color.rgb , ColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
			ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
        } else {
            Color.rgb *= TexColor.rgb * Spa_CubeMap_Intensity;
            ShadowColor.rgb *= TexColor.rgb * Spa_CubeMap_Intensity;
			
			ColorTemp = 1 - ( (1-(TexColor.rgb * Spa_CubeMap_Intensity)) * (1-ColorTemp) );
			ShadowColorTemp = 1 - ( (1-(TexColor.rgb * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp) );
			
			Color.rgb = lerp( Color.rgb , ColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
			ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp , 1 - Spa_CubeMap_SpecularLight_Tint );
        }
		#endif
		
        Color.a *= TexColor.a;
        ShadowColor.a *= TexColor.a;
    }
    // スペキュラ適用
	
	//////////////////////////////////////////////////////////////////////////////////////
	// Cube Map Processing
	/////////////////////////////////////////////////////////////////////////////////////
	
	#ifdef CubeMapTexture
	
	float3 CubeMapRefVec;
	
	#if CubeMap_Affected_By_LightDirection == 0
	CubeMapRefVec = normalize(IN.Eye);
	#else
	CubeMapRefVec = normalize(normalize(IN.Eye)-LightDirection);
	#endif
	
	#if Spa_CubeMap_Use_NormalMap == 1
	float3 ReflVec = reflect(-CubeMapRefVec, NormalDirection);
	float4 Reflection = texCUBE(CubeMapSamp, ReflVec.xyz);
	
	float4 CubeEnv = Reflection;
	
	#else
	float3 ReflVec = reflect(-CubeMapRefVec, IN.Normal);
	float4 Reflection = texCUBE(CubeMapSamp, ReflVec.xyz);
	
	float4 CubeEnv = Reflection;
	#endif
	
	/////////////////////////////////////////////////////////////////////////////////////
	
	float CubeEnvMonoCalculate = (CubeEnv.r+CubeEnv.g+CubeEnv.b)/3;
	float4 CubeEnvMono = float4(CubeEnvMonoCalculate,CubeEnvMonoCalculate,CubeEnvMonoCalculate,CubeEnv.a);
	
	CubeEnv = lerp(CubeEnvMono, CubeEnv, CubeEnv.a * Spa_CubeMap_Saturation);
	
	/////////////////////////////////////////////////////////////////////////////////////
	
	float3 ColorTemp1 = Color.rgb;
	float3 ShadowColorTemp1 = ShadowColor.rgb;
	
	#if Spa_CubeMap_Use_SpecularMap == 1
	Color.rgb += CubeEnv.rgb * SpecularLevel * Spa_CubeMap_Intensity;
	ShadowColor.rgb += CubeEnv.rgb * SpecularLevel * Spa_CubeMap_Intensity;
	
	ColorTemp1 = 1 - ( (1-(CubeEnv.rgb * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ColorTemp1) );
	ShadowColorTemp1 = 1 - ( (1-(CubeEnv.rgb * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp1) );
			
	Color.rgb = lerp( Color.rgb , ColorTemp1 , 1 - Spa_CubeMap_SpecularLight_Tint );
	ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp1 , 1 - Spa_CubeMap_SpecularLight_Tint );
	
	#else
	Color.rgb += CubeEnv.rgb * Spa_CubeMap_Intensity;
	ShadowColor.rgb += CubeEnv.rgb * Spa_CubeMap_Intensity;
	
	ColorTemp1 = 1 - ( (1-(CubeEnv.rgb * Spa_CubeMap_Intensity)) * (1-ColorTemp1) );
	ShadowColorTemp1 = 1 - ( (1-(CubeEnv.rgb * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp1) );
			
	Color.rgb = lerp( Color.rgb , ColorTemp1 , 1 - Spa_CubeMap_SpecularLight_Tint );
	ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp1 , 1 - Spa_CubeMap_SpecularLight_Tint );
	#endif
	
	#endif
	
	//////////////////////////////////////////////////////////////////////////////////////
	
	float3 ColorTemp2 = Color.rgb;
	float3 ShadowColorTemp2 = ShadowColor.rgb;
	
	#if SpecularLight_Use_SpecularMap == 1
    Color.rgb += Specular * SpecularLevel * SpecularLight_Intensity;
	ShadowColor.rgb += Specular * SpecularLevel * SpecularLight_Intensity;
	
	ColorTemp2 = 1 - ( (1-(Specular * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ColorTemp2) );
	ShadowColorTemp2 = 1 - ( (1-(Specular * SpecularLevel * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp2) );
			
	Color.rgb = lerp( Color.rgb , ColorTemp2 , 1 - Spa_CubeMap_SpecularLight_Tint );
	ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp2 , 1 - Spa_CubeMap_SpecularLight_Tint );
	
	#else
    Color.rgb += Specular * SpecularLight_Intensity;
	ShadowColor.rgb += Specular * SpecularLight_Intensity;
	
	ColorTemp2 = 1 - ( (1-(Specular * Spa_CubeMap_Intensity)) * (1-ColorTemp2) );
	ShadowColorTemp2 = 1 - ( (1-(Specular * Spa_CubeMap_Intensity)) * (1-ShadowColorTemp2) );
			
	Color.rgb = lerp( Color.rgb , ColorTemp2 , 1 - Spa_CubeMap_SpecularLight_Tint );
	ShadowColor.rgb = lerp( ShadowColor.rgb , ShadowColorTemp2 , 1 - Spa_CubeMap_SpecularLight_Tint );
	#endif
	
	#if VERTEXCOLOR == 1
	Color *= VertexColor;
	ShadowColor *= VertexColor;
	#endif
		
	#if SUBMAP == 1
	
	#if Sub_Map_Type == 0
	Color.rgb = SubMap;
	ShadowColor.rgb = SubMap;
	
	#elif Sub_Map_Type == 1
	Color.rgb *= SubMap;
	ShadowColor.rgb *= SubMap;
	
	#elif Sub_Map_Type == 2
	Color.rgb *= (SubMap+1);
	ShadowColor.rgb *= (SubMap+1);
	
	#else
	Color.rgb *= SubMap;
	ShadowColor.rgb *= SubMap;
	Color.rgb *= (SubMap+1);
	ShadowColor.rgb *= (SubMap+1);
	#endif
	
	#endif
	
	#if Rim_Use_NormalMap == 1
		float rim = 1.0 - saturate(dot(normalize(IN.Eye), NormalDirection)* Rim_Gradient);
	#else
		float rim = 1.0 - saturate(dot(normalize(IN.Eye), IN.Normal)* Rim_Gradient);
	#endif
		
	#if Rim_Use_SpecularMap == 1
		Color.rgb += float3(rim,rim,rim) * Rim_Color * SpecularLevel * Rim_Intensity ;
	#else
		Color.rgb += float3(rim,rim,rim) * Rim_Color * Rim_Intensity ;
	#endif
		
	#ifdef Rim_Shadow_Area_Intensity
		ShadowColor.rgb += float3(rim,rim,rim) * Rim_Color * Rim_Shadow_Area_Intensity * Rim_Intensity;
	#else
		ShadowColor.rgb += float3(rim,rim,rim) * Rim_Color * ((ShadowColor.r+ShadowColor.g+ShadowColor.b)/3) * Rim_Intensity;
	#endif
	
	////////////////////////////////////////////////////////////////////////////////////
	
	float U = IBL_Blur;
	float V = IBL_Blur;
	float W = IBL_Blur;
	
	#if IBL == 1
	
		#if IBL_Use_NormalMap == 1
			float3 IBL_Normal = NormalDirection;
		#else
			float3 IBL_Normal = IN.Normal;
		#endif
		
		#ifdef IBLTexture
		
			float4 IBLtex = texCUBE(IBLSamp, IBL_Normal);
			
				if (IBL_Blur > 0)
				{
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,0,0));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,0,0));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,0,0));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,V,0));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,-V,0));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,0,W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,0,-W));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,V,0));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,V,0));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,-V,0));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,-V,0));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,V,W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,-V,W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,0,W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,0,W));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,V,-W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(0,-V,-W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,0,-W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,0,-W));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,V,W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,V,W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,-V,W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,-V,-W));
				
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,-V,-W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,V,-W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(-U,V,-W));
				IBLtex += texCUBE(IBLSamp, IBL_Normal+float3(U,-V,W));
				
				IBLtex =  saturate(IBLtex/27);
				}
				
		#else
		
			float4 IBLtex = texCUBE(CubeMapLowSamp, IBL_Normal);
			
				if (IBL_Blur > 0)
				{
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,0,0));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,0,0));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,0,0));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,V,0));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,-V,0));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,0,W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,0,-W));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,V,0));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,V,0));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,-V,0));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,-V,0));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,V,W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,-V,W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,0,W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,0,W));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,V,-W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(0,-V,-W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,0,-W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,0,-W));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,V,W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,V,W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,-V,W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,-V,-W));
				
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,-V,-W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,V,-W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(-U,V,-W));
				IBLtex += texCUBE(CubeMapLowSamp, IBL_Normal+float3(U,-V,W));
				
				IBLtex =  saturate(IBLtex/27);
				}
				
		#endif

		IBLtex.rgb *= IBL_Brightness;
		
		float IBLtexMono = (IBLtex.r+IBLtex.g+IBLtex.b)/3;
		
		IBLtex.rgb = lerp(IBLtexMono,IBLtex.rgb,IBL_Saturation);
		
		float3 IBLtex0 = lerp(0,IBLtex,IBL_Intensity);
		float3 IBLtex1 = lerp(1,IBLtex,IBL_Intensity);
		
		Color.rgb *= (IBLtex1);
		Color.rgb *= (IBLtex0+1);
		
		ShadowColor.rgb *= (IBLtex1);
		ShadowColor.rgb *= (IBLtex0+1);
		
	#endif
	
	/////////////////////////////////////////////////////////////////////////////////////
    
    // テクスチャ座標に変換
    IN.ZCalcTex /= IN.ZCalcTex.w;
    float2 TransTexCoord;
    TransTexCoord.x = (1.0f + IN.ZCalcTex.x)*0.5f;
    TransTexCoord.y = (1.0f - IN.ZCalcTex.y)*0.5f;
    
    if( any( saturate(TransTexCoord) != TransTexCoord ) ) {
	
		#if ALPHATEST == 1
		
			Color.a = ( Color.a >= Alpha_Threshold ) ? 1 : 0;
				
		#endif
		
		/////////////////////////////////////////////////////////////////////////////////////////////////
		if (Controller)
		{
			#ifdef NormalMapTexture
				Color.rgb = lerp( Color.rgb , NormalDirection , Normal_view );
				Color.rgb = lerp( Color.rgb , tex2D(NormalMapSamp,Tex) , NormalMap_view );
			#else
				Color.rgb = lerp( Color.rgb , IN.Normal , Normal_view );
				Color.rgb = lerp( Color.rgb , 0 , NormalMap_view );
			#endif
			
			#ifdef SpecularMapTexture
				Color.rgb = lerp( Color.rgb , tex2D(SpecularMapSamp,Tex) , SpecularMap_view );
			#else
				Color.rgb = lerp( Color.rgb , 1 , SpecularMap_view );
			#endif
			
			#ifdef SubMapTexture
				Color.rgb = lerp( Color.rgb , tex2D(SubMapSamp,SubMapUV) , SubMap_view );
			#else
				Color.rgb = lerp( Color.rgb , 0 , SubMap_view );
			#endif
			
			Color = lerp( Color , VertexColor , VertexColor_view );
			
			#if IBL == 1
				Color.rgb = lerp( Color.rgb , IBLtex , IBL_view );
			#else
				Color.rgb = lerp( Color.rgb , 1 , IBL_view );
			#endif
			
			Color.rgb = lerp( Color.rgb , 1 , ToonShadow_view );
			
			Color.a = lerp( Color.a , 1 , AlphaDisabled_view );
			
			Color.rgb = lerp(Color.rgb , float3(Tex,0) , UV_view );
			
			Color.rgb = lerp(Color.rgb , float3(SubMapUV,0) , SubMapUV_view );
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////
	
        // シャドウバッファ外
        return Color;
    } else {
        float comp;
		float compSSS;
        if(parthf) {
            // セルフシャドウ mode2
            comp=1-saturate(max(IN.ZCalcTex.z-tex2D(DefSampler,TransTexCoord).r , 0.0f)*SKII2*TransTexCoord.y-0.3f);
        } else {
            // セルフシャドウ mode1
            comp=1-saturate(max(IN.ZCalcTex.z-tex2D(DefSampler,TransTexCoord).r , 0.0f)*SKII1-0.3f);
        }
		compSSS = comp;
		
        if ( useToon ) {
            // トゥーン適用
            #if TOONSHADING == 1
			
			#if Toon_Use_NormalMap == 1
            comp = min(saturate(dot(NormalDirection,-LightDirection)*Toon_Gradient),comp);
			
				#if SUBSURFACETOON == 1
				compSSS = min(saturate(dot(NormalDirection,-LightDirection)*Subsurface_Toon_Gradient),compSSS);
				#endif
			
			#else
            comp = min(saturate(dot(IN.Normal,-LightDirection)*Toon_Gradient),comp);
			
				#if SUBSURFACETOON == 1
				compSSS = min(saturate(dot(IN.Normal,-LightDirection)*Subsurface_Toon_Gradient),compSSS);
				#endif
			#endif
			
			#endif
            ShadowColor.rgb *= MaterialToon * Toon_Brightness;
        }
		
		#if SUBSURFACETOON == 1
		
		#ifdef ThicknessMapTexture
		float4 Thickness = tex2D( ThicknessMapSamp , Tex );
		#endif
		
		float rimSSS = 1.0 - saturate(dot(normalize(IN.Eye), IN.Normal)* Subsurface_Rim_Gradient);
		compSSS -= rimSSS * Subsurface_Rim_Intensity;
		
		#ifdef Subsurface_Rim_Shadow_Area_Intensity
		comp += rimSSS * Subsurface_Rim_Shadow_Area_Intensity * Subsurface_Rim_Intensity;
		#endif
		
		#ifndef Subsurface_Rim_Shadow_Area_Intensity
		comp += rimSSS * ((ShadowColor.r+ShadowColor.g+ShadowColor.b)/3) * Subsurface_Rim_Intensity;
		#endif
        
		Color.rgb = lerp(Color.rgb, ( Color.rgb * Subsurface_Color * (Subsurface_Color+1) ) ,(1-compSSS)* Subsurface_Toon_Intensity);
		
		#endif
		
		
		#if SUBSURFACETOON == 1
		
		#ifdef ThicknessMapTexture
        float4 ans = lerp(Color, ShadowColor, (1-comp)*Thickness*Toon_Intensity);
		#else
		float4 ans = lerp(Color, ShadowColor, (1-comp)*Toon_Intensity);
		#endif
		
		#else
		
		float4 ans = lerp(Color, ShadowColor, (1-comp)*Toon_Intensity);
		
		#endif
		
		
		#if ALPHATEST == 1
		
			ans.a = ( ans.a >= Alpha_Threshold ) ? 1 : 0;
				
		#endif
		
        if( transp ) ans.a = 0.5f;
		
		
		/////////////////////////////////////////////////////////////////////////////////////////////////
		if (Controller)
		{
			#ifdef NormalMapTexture
				ans.rgb = lerp( ans.rgb , NormalDirection , Normal_view );
				ans.rgb = lerp( ans.rgb , tex2D(NormalMapSamp,Tex) , NormalMap_view );
			#else
				ans.rgb = lerp( ans.rgb , IN.Normal , Normal_view );
				ans.rgb = lerp( ans.rgb , 0 , NormalMap_view );
			#endif
			
			#ifdef SpecularMapTexture
				ans.rgb = lerp( ans.rgb , tex2D(SpecularMapSamp,Tex) , SpecularMap_view );
			#else
				ans.rgb = lerp( ans.rgb , 1 , SpecularMap_view );
			#endif
			
			#ifdef SubMapTexture
				ans.rgb = lerp( ans.rgb , tex2D(SubMapSamp,SubMapUV) , SubMap_view );
			#else
				ans.rgb = lerp( ans.rgb , 0 , SubMap_view );
			#endif
			
			ans = lerp( ans , VertexColor , VertexColor_view );
			
			#if IBL == 1
				ans.rgb = lerp( ans.rgb , IBLtex , IBL_view );
			#else
				ans.rgb = lerp( ans.rgb , 1 , IBL_view );
			#endif
			
			ans.rgb = lerp( ans.rgb , comp , ToonShadow_view );
			
			ans.a = lerp( ans.a , 1 , AlphaDisabled_view );
			
			ans.rgb = lerp(ans.rgb , float3(Tex,0) , UV_view );
			
			ans.rgb = lerp(ans.rgb , float3(SubMapUV,0) , SubMapUV_view );
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////
		
        return ans;
    }
}

// オブジェクト描画用テクニック（アクセサリ用）
technique MainTecBS0  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(false, false, false);
        PixelShader  = compile ps_3_0 BufferShadow_PS(false, false, false);
    }
}

technique MainTecBS1  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(true, false, false);
        PixelShader  = compile ps_3_0 BufferShadow_PS(true, false, false);
    }
}

technique MainTecBS2  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(false, true, false);
        PixelShader  = compile ps_3_0 BufferShadow_PS(false, true, false);
    }
}

technique MainTecBS3  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(true, true, false);
        PixelShader  = compile ps_3_0 BufferShadow_PS(true, true, false);
    }
}

// オブジェクト描画用テクニック（PMDモデル用）
technique MainTecBS4  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(false, false, true);
        PixelShader  = compile ps_3_0 BufferShadow_PS(false, false, true);
    }
}

technique MainTecBS5  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(true, false, true);
        PixelShader  = compile ps_3_0 BufferShadow_PS(true, false, true);
    }
}

technique MainTecBS6  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(false, true, true);
        PixelShader  = compile ps_3_0 BufferShadow_PS(false, true, true);
    }
}

technique MainTecBS7  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 BufferShadow_VS(true, true, true);
        PixelShader  = compile ps_3_0 BufferShadow_PS(true, true, true);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
